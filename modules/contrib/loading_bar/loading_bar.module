<?php

/**
 * @file
 * Code for the loading bar module.
 */

use Drupal\Core\Cache\Cache;

/**
 * A cache ID for the prebuilt styles.
 */
define('LOADING_BAR_PRESET_CID', 'loading_bar_presets');

/**
 * Implements hook_theme().
 */
function loading_bar_theme() {
  return [
    'loading_bar' => [
      'render element' => 'element',
      'template' => 'loading-bar',
    ],
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function loading_bar_library_info_alter(&$libraries, $extension) {
  if ($extension == 'loading_bar') {
    // Map /library/* paths to CDN.
    foreach ($libraries as $library_name => &$library) {
      // Check CDN setting exists.
      if (isset($library['cdn'])) {
        // Check if the CDN's source /library/* path exists.
        reset($library['cdn']);
        if (!file_exists(DRUPAL_ROOT . key($library['cdn']))) {
          loading_bar_library_info_alter_recursive($library, $library['cdn']);
        }
      }
    }
  }
}

/**
 * Recursive through a loading bar library.
 *
 * @param array $library
 *   A loading bar library defined in loading_bar.libraries.yml.
 * @param array $cdn
 *   A associative array of library paths mapped to CDN URL.
 */
function loading_bar_library_info_alter_recursive(array &$library, array $cdn) {
  foreach ($library as $key => &$value) {
    // CSS and JS files and listed in associative arrays keyed via string.
    if (is_string($key) && is_array($value)) {
      // Ignore the CDN's associative array.
      if ($key != 'cdn') {
        // Replace the CDN sources with the CDN URL destination.
        foreach ($cdn as $source => $destination) {
          if (strpos($key, $source) === 0) {
            $uri = str_replace($source, $destination, $key);
            $library[$uri] = $value;
            $library[$uri]['type'] = 'external';
            unset($library[$key]);
            break;
          }
        }

        // Find nested libraries.
        loading_bar_library_info_alter_recursive($value, $cdn);
      }
    }
  }
}

/**
 * Implements hook_hook_info().
 */
function loading_bar_hook_info() {
  $hooks['loading_bar_preset'] = ['group' => 'loading_bar'];

  return $hooks;
}

/**
 * Implements hook_loading_bar_preset().
 */
function loading_bar_loading_bar_preset() {
  return [
    'loading_bar:line' => [
      'preset' => 'loading_bar:line',
      'title' => t('Line'),
      'type' => 'stroke',
      'path' => 'M10 10L90 10',
      'stroke' => '#2255BB',
      'stroke-width' => 3,
      'stroke-trail' => '#DDDDDD',
      'stroke-trail-width' => 1,
      'bbox' => '10 10 80 10',
    ],
    'loading_bar:fan' => [
      'preset' => 'loading_bar:fan',
      'title' => t('Fan'),
      'type' => 'stroke',
      'path' => 'M10 90A40 40 0 0 1 90 90',
      'fill-dir' => 'btt',
      'fill' => '#2255BB',
      'fill-background' => '#DDDDDD',
      'fill-background-extrude' => 3,
      'stroke-dir' => 'normal',
      'stroke' => '#2255BB',
      'stroke-width' => '3',
      'stroke-trail' => '#DDDDDD',
      'stroke-trail-width' => 0.5,
      'bbox' => '10 50 80 40',
    ],
    'loading_bar:circle' => [
      'preset' => 'loading_bar:circle',
      'title' => t('Circle'),
      'type' => 'stroke',
      'path' => 'M50 10A40 40 0 0 1 50 90A40 40 0 0 1 50 10',
      'fill-dir' => 'btt',
      'fill' => '#2255BB',
      'fill-background' => '#DDDDDD',
      'fill-background-extrude' => 3,
      'stroke-dir' => 'normal',
      'stroke' => '#2255BB',
      'stroke-width' => '3',
      'stroke-trail' => '#DDDDDD',
      'stroke-trail-width' => 0.5,
      'bbox' => "10 10 80 80",
    ],
    'loading_bar:bubble' => [
      'preset' => 'loading_bar:bubble',
      'title' => t('Bubble'),
      'type' => 'fill',
      'path' => 'M50 10A40 40 0 0 1 50 90A40 40 0 0 1 50 10',
      'fill-dir' => 'btt',
      'fill' => 'data:ldbar/res,bubble(#3390DD,#CCEEFF)',
      'pattern-size' => "150",
      'fill-background' => '#DDDDDD',
      'fill-background-extrude' => 2,
      'stroke-dir' => 'normal',
      'stroke' => '#2255BB',
      'stroke-width' => '3',
      'stroke-trail' => '#DDDDDD',
      'stroke-trail-width' => 0.5,
      'bbox' => '10 10 80 80',
    ],
    'loading_bar:rainbow' => [
      'preset' => 'loading_bar:rainbow',
      'title' => t('Rainbow'),
      'type' => 'stroke',
      'path' => 'M10 10L90 10',
      'stroke' => 'data:ldbar/res,gradient(0,1,#A551DF,#FD51AD,#FF7F82,#FFB874,#FFEB90)',
      'bbox' => '10 10 80 10',
    ],
    'loading_bar:energy' => [
      'preset' => 'loading_bar:energy',
      'title' => t('Energy'),
      'type' => 'fill',
      'path' => 'M15 5L85 5A5 5 0 0 1 85 15L15 15A5 5 0 0 1 15 5',
      'stroke' => '#F000000',
      'fill' => 'data:ldbar/res,gradient(45,2,#44EE99,#88FFBB,#44EE99)',
      'fill-dir' => "ltr",
      'fill-background' => '#444444',
      'fill-background-extrude' => 1,
      'bbox' => '10 5 80 10',
    ],
    'loading_bar:stripe' => [
      'preset' => 'loading_bar:stripe',
      'title' => t('Stripe'),
      'type' => 'fill',
      'path' => 'M15 5L85 5A5 5 0 0 1 85 15L15 15A5 5 0 0 1 15 5',
      'stroke' => '#F000000',
      'fill' => 'data:ldbar/res,stripe(#2255BB,#5588EE,1)',
      'fill-dir' => "ltr",
      'fill-background' => '#DDDDDD',
      'fill-background-extrude' => 1,
      'bbox' => '10 5 80 10',
    ],
    'loading_bar:text' => [
      'preset' => 'loading_bar:text',
      'title' => t('Text'),
      'type' => 'fill',
      'img' => 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="70" height="20" viewBox="0 0 70 20"><text x="35" y="10" text-anchor="middle" dominant-baseline="central" font-family="arial">LOADING</text></svg>',
      'fill-background' => '#DDDDDD',
      'fill-background-extrude' => 1.3,
      'pattern-size' => 100,
      'fill-dir' => "ltr",
      'img-size' => "70,20",
      'bbox' => '0 0 70 20',
    ],
  ];
}

/**
 * Returns a specific preset configuration.
 *
 * @param string|null $name
 *   The present name, empty for all values.
 *
 * @return array
 *   The preset configuration.
 */
function loading_bar_get_preset(string $name = NULL) {
  if ($cached = \Drupal::cache()->get(LOADING_BAR_PRESET_CID)) {
    $presets = $cached->data;
  }
  else {
    $presets = \Drupal::moduleHandler()->invokeAll('loading_bar_preset');
    \Drupal::moduleHandler()->alter('loading_bar_preset', $presets);
    \Drupal::cache()->set(LOADING_BAR_PRESET_CID, $presets, Cache::PERMANENT);
  }

  $present = NULL;
  if (array_key_exists($name, $presets)) {
    $present = $presets[$name];
  }

  return ($name === NULL) ? $presets : $present;
}
